#/bin/bash
#
#
# Code to initialize the Teensy code and then run the pi code when the Pi reboots
#
# This code is called from rc.local as follows and creates a log called 'initlog'
#
# TODO: It would be great if the PI could somehow signal when it has successfully completed running the local slave code and established the UDP socket
#
# RG Apr 12 2018
# RG Dec 5 2018 - updated for the testbed
# RG Mar 1 2019 - updated for the symposium demo
# RG Nov 27 2019 - removed .hexmap suffix to standardize with new device_locator_select
# RG Nov 27 2019 - added journal control log file size reduction 
# RG Feb 17 2020 - updated teensy programming to do a reset test first to avoid hanging on stuck teensies
# 

# set path variables
pdepath=/home/pi/code/RPi_World
javapath=/usr/local/bin/processing-3.5.3/processing-java

# get a list of connected teensys
echo ...........................
sudo date
sudo echo === getting teensy list
sudo tycmd list > /home/pi/teensy_ids

# for every teensy id found, do the right thing
echo === programming teensys

cd /home/pi
node_hex_file_path="/home/pi/code/RPi_World/data/"
node_hex_file_name_to_split=`cat /home/pi/code/RPi_World/data/device_locator_select` # this file will have tell us what hexmap file to use
IFS=" " read -r node_hex_file_name SPLIT <<< "$node_hex_file_name_to_split"
node_hex_files="$node_hex_file_path$node_hex_file_name.hexmap"     	 # cmdline parameter is the path to the node hex map
node_id_file=teensy_ids  # this file is generated locally by 'tycmd list'

# create arrays for the node hex map and list of local nodes
declare -a node_hex_code
declare -a my_node_ids

# read the files into the arrays
node_hex_code=(`cat $node_hex_files`)
my_node_ids=(`grep -Eo '[0-9]{1,7}' $node_id_file`)

# go through the list of local node IDs
for node in ${my_node_ids[@]}; do

  # extract the hex file name corresponding to $node
  hex_file=`echo ${node_hex_code[@]} | tr ' ' '\n' | grep -e $node: | cut -f 2 -d ':'`

  # check file name string for spaces
  echo $hex_file | grep -q ' '

  # if filename string has spaces in it, node found more than once
  if [[ $? -eq 0 ]]; then
     echo --ERROR-- Node $node found more than once

  # if $hex_file is empty, $node was not found in the node hex map
  elif [ -z $hex_file ]; then
    #handle the error here
    echo --ERROR-- Node $node not found

  else
    # call tycmd here to load $hex_file into $node
    cd /home/pi/code/Hex_Files
    echo Teensy ID:$node gets $hex_file

    # testing whether board is responsive by resetting before programming, since a programming fail hangs while reset fail doesn't
    # in the line below: 2>&1 redirects stderr to stdout bc the line which shows the reset failure is placed on stderr instead of stdout by tycmd

    if sudo tycmd reset --board $node 2>&1 | tee /dev/tty | grep -q Failed; then
      echo == Node $node failed to reset--skipping programming ==
    else
      sudo tycmd upload $hex_file --board $node
    fi

  fi
done

# clear old journald log files
echo == Deleting old journald logs
sudo journalctl --vacuum-time=1months

# run Processing sketch on PI
echo === Running processing sketch on RPi $pi_num
xvfb-run $javapath --sketch=$pdepath --force --run

